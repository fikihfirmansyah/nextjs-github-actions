# Sample workflow for building and deploying a Next.js site to GitHub Pages using Docker
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
          
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Build Next.js app in Docker
        run: |
          # Create a Dockerfile for building the Next.js app
          cat > Dockerfile.build << EOF
          FROM node:16-alpine
          
          WORKDIR /app
          
          # Copy package.json first
          COPY package*.json ./
          
          # Copy yarn.lock if it exists
          COPY yarn*.lock* ./
          
          # Install dependencies based on package manager
          RUN if [ -f "yarn.lock" ]; then \
                yarn install; \
              else \
                npm ci; \
              fi
          
          # Copy the rest of the project
          COPY . .
          
          # Add next export to package.json if it doesn't exist
          RUN if [ -f "yarn.lock" ]; then \
                if ! grep -q "\"export\":" package.json; then \
                  sed -i 's/\"scripts\": {/\"scripts\": {\n    \"export\": \"next export\",/g' package.json; \
                fi; \
                yarn build && yarn export; \
              else \
                if ! grep -q "\"export\":" package.json; then \
                  sed -i 's/\"scripts\": {/\"scripts\": {\n    \"export\": \"next export\",/g' package.json; \
                fi; \
                npm run build && npm run export; \
              fi
          EOF
          
          # Build using Docker
          docker build -t nextjs-builder -f Dockerfile.build .
          
          # Extract the output directory from the container
          docker create --name nextjs-export nextjs-builder
          docker cp nextjs-export:/app/out ./out
          docker rm nextjs-export
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
